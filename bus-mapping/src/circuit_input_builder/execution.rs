//! Execution step related module.

use crate::{error::ExecError, exec_trace::OperationRef, operation::RWCounter};
use eth_types::{
    evm_types::{Gas, GasCost, OpcodeId, ProgramCounter},
    GethExecStep, U256,
};

/// An execution step of the EVM.
#[derive(Clone, Debug)]
pub struct ExecStep {
    /// Execution state
    pub exec_state: ExecState,
    /// Program Counter
    pub pc: ProgramCounter,
    /// Stack size
    pub stack_size: usize,
    /// Memory size
    pub memory_size: usize,
    /// Gas left
    pub gas_left: Gas,
    /// Gas cost of the step.  If the error is OutOfGas caused by a "gas uint64
    /// overflow", this value will **not** be the actual Gas cost of the
    /// step.
    pub gas_cost: GasCost,
    /// Accumulated gas refund
    pub gas_refund: Gas,
    /// Call index within the [`Transaction`]
    pub call_index: usize,
    /// The global counter when this step was executed.
    pub rwc: RWCounter,
    /// Reversible Write Counter.  Counter of write operations in the call that
    /// will need to be undone in case of a revert.
    pub reversible_write_counter: usize,
    /// The list of references to Operations in the container
    pub bus_mapping_instance: Vec<OperationRef>,
    /// Error generated by this step
    pub error: Option<ExecError>,
    /// Step auxiliary data
    pub aux_data: Option<StepAuxiliaryData>,
}

impl ExecStep {
    /// Create a new Self from a `GethExecStep`.
    pub fn new(
        step: &GethExecStep,
        call_index: usize,
        rwc: RWCounter,
        reversible_write_counter: usize,
    ) -> Self {
        ExecStep {
            exec_state: ExecState::Op(step.op),
            pc: step.pc,
            stack_size: step.stack.0.len(),
            memory_size: step.memory.0.len(),
            gas_left: step.gas,
            gas_cost: step.gas_cost,
            gas_refund: Gas(0),
            call_index,
            rwc,
            reversible_write_counter,
            bus_mapping_instance: Vec::new(),
            error: None,
            aux_data: None,
        }
    }
}

impl Default for ExecStep {
    fn default() -> Self {
        Self {
            exec_state: ExecState::Op(OpcodeId::INVALID(0)),
            pc: ProgramCounter(0),
            stack_size: 0,
            memory_size: 0,
            gas_left: Gas(0),
            gas_cost: GasCost(0),
            gas_refund: Gas(0),
            call_index: 0,
            rwc: RWCounter(0),
            reversible_write_counter: 0,
            bus_mapping_instance: Vec::new(),
            error: None,
            aux_data: None,
        }
    }
}

/// Execution state
#[derive(Clone, Debug, Eq, PartialEq)]
pub enum ExecState {
    /// EVM Opcode ID
    Op(OpcodeId),
    /// Virtual step Begin Tx
    BeginTx,
    /// Virtual step End Tx
    EndTx,
    /// Virtual step Copy To Memory
    CopyToMemory,
    /// Virtal step Copy Code To Memory
    CopyCodeToMemory,
}

impl ExecState {
    /// Returns `true` if `ExecState` is an opcode and the opcode is a `PUSHn`.
    pub fn is_push(&self) -> bool {
        if let ExecState::Op(op) = self {
            op.is_push()
        } else {
            false
        }
    }

    /// Returns `true` if `ExecState` is an opcode and the opcode is a `DUPn`.
    pub fn is_dup(&self) -> bool {
        if let ExecState::Op(op) = self {
            op.is_dup()
        } else {
            false
        }
    }

    /// Returns `true` if `ExecState` is an opcode and the opcode is a `SWAPn`.
    pub fn is_swap(&self) -> bool {
        if let ExecState::Op(op) = self {
            op.is_swap()
        } else {
            false
        }
    }
}

/// Auxiliary data of Execution step
#[derive(Clone, Copy, Debug)]
pub enum CopyOrigin {
    /// Origin of the copied bytes is or not the Tx CallData.
    TxCallData(bool),
    /// Origin of the copied bytes is bytecode. For which it's hash is provided.
    Code(U256),
}

/// Auxiliary data of Execution step
#[derive(Clone, Copy, Debug)]
pub struct StepAuxiliaryData {
    /// Source start address
    src_addr: u64,
    /// Destination address
    dst_addr: u64,
    /// Bytes left
    bytes_left: u64,
    /// Source end address
    src_addr_end: u64,
    /// Origin of the copied data.
    copy_origin: CopyOrigin,
}

impl StepAuxiliaryData {
    /// Source start address
    fn src_addr(&self) -> u64 {
        self.src_addr
    }
    /// Destination address
    fn dst_addr(&self) -> u64 {
        self.dst_addr
    }
    /// Bytes left
    fn bytes_left(&self) -> u64 {
        self.bytes_left
    }
    /// Source end address
    fn src_addr_end(&self) -> u64 {
        self.src_addr_end
    }
    /// Indicate origin of the data to copy
    fn copy_origin(&self) -> CopyOrigin {
        self.copy_origin
    }
}
